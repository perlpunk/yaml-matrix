#!/usr/bin/perl
use strict;
use warnings;

use Encode;
use YAML::PP::Parser;
use YAML::PP::Common;

my ($file) = @ARGV;

my $receiver = sub {
    my ($self, undef, $event) = @_;
    print encode_utf8(YAML::PP::Common::event_to_test_suite($event, { flow => 1 })), "\n";
};

if ($ENV{BULK}) {
    # Input: lines like 229Q/in.yaml
    # Output: $ENV{BULK}/229Q.{stdout,stderr,error}
    my $parser = YAML::PP::Parser->new(
        receiver => $receiver,
    );
    my $dir = $ENV{BULK};
    while (my $file = <STDIN>) {
        chomp $file;
#        warn __PACKAGE__.':'.__LINE__.": !!! $file\n";
        my ($id) = $file =~ m{^([A-Z0-9]+)/in\.yaml} or next;
        open my $fh, '>', "$dir/$id.error" or die $!;
        close $fh;

        my $stdout = '';
        my $stderr = '';
        eval {
            local *STDOUT;
            local *STDERR;
            open STDOUT, ">>", \$stdout;
            open STDERR, ">>", \$stderr;
            $parser->parse_file($file);
        };
        if (my $err = $@) {
            $stderr .= $err;
        }
        else {
            unlink "$dir/$id.error";
        }
        open $fh, '>', "$dir/$id.stdout" or die $!;
        print $fh $stdout;
        close $fh;
        open $fh, '>', "$dir/$id.stderr" or die $!;
        print $fh $stderr;
        close $fh;

    }
    exit;
}

my $parser = YAML::PP::Parser->new(
    receiver => $receiver,
    $file ? (reader => YAML::PP::Reader::File->new) : (),
);

if ($file) {
    $parser->parse_file($file);
}
else {
    my $yaml;
    $yaml = do { local $/; <STDIN> };
    $yaml = decode_utf8($yaml);
    $parser->parse_string($yaml);
}

