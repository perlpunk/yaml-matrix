#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Data::Dumper;
use FindBin '$Bin';
use lib "$Bin/../lib/perl5";
use YAML::XS qw/ DumpFile /;
use Encode;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Basename qw/ basename /;
use IO::All;
use File::Path qw/ rmtree /;
use YAML::PP;
use YAML::Matrix qw/
    generate_expected_output
    load_csv
/;

my $yp = YAML::PP->new( schema => [qw/ + Merge /] );
my $list = $yp->load_file("$Bin/../list.yaml");

my $docker_user = $ENV{DOCKER_USER} || 'yamlio';

GetOptions(
    "path=s" => \my $path,
    "help|h" => \my $help,
    "list|l" => \my $listviews,
    "all|a" => \my $all,
    "verbose|v+" => \my $verbose,
    "data-dir=s" => \my $datadir,
    "matrix-dir=s" => \my $matrixdir,
    "view|f=s" => \my $view,
);
$verbose ||= 0;
$datadir //= "$Bin/../yaml-test-suite/data";
$matrixdir //= "$Bin/../matrix";

my %skip = (
    'perl-pplibyaml' => { event => 1 },
);

my %views;
for my $lib (sort keys $list->{libraries}->%*) {
    my $conf = $list->{libraries}->{ $lib };
    my $runtime = $conf->{runtime};
    my $tests = $conf->{tests};
    for my $test (@$tests) {
        next if $skip{ lib }->{ $test };
        next if $test =~ m/^(yaml)$/;
        $views{ "$lib.$test" } = {
            runtime => "alpine-runtime-$runtime",
        };
    }
}
my @views = sort keys %views;

if ($help) {
    usage();
}
elsif ($listviews) {
    say for @views;
}
elsif ($all) {
    for my $fw (@views) {
        run_tests(
            view => $fw,
            data => $datadir,
        );
    }
}
elsif ($view) {
    run_tests(
        view => $view,
        data => $datadir,
    );
}
else {
    usage();
}

sub run_tests {
    my %args = @_;
    my %tests;
    my $view = $args{view};
    say "-" x 80;
    say "Running $view";
    my $data = $args{data};

    my $start = time;
    my $end;

    my $config = $views{ $view }
        or die "View $view not supported";
    my $out = "$matrixdir/tmp";
    my ($emitters) = gather_framework_info($view);

    my $info = $emitters->{ $view };
    my ($lib, $format) = $view =~ m/^(.+)\.(.+)$/;
    if (not $emitters->{ $view }) {
        die "view $view not supported";
    }
    my $bin = "$lib-$format";

    mkdir $out;
    if ($path) {
        my @dirs = grep { m{/[A-Z0-9]{4}$} } map { "$_" } io->dir($data)->all;
        for my $dir (sort @dirs) {
            my $id = basename $dir;
            my $in_yaml = "$dir/in.yaml";
            my $cmd = "timeout 3 $path < $in_yaml > $out/$id.stdout 2>$out/$id.stderr";
            print "Running $id\r";
            system $cmd;
            if ($?) {
                my $now = time;
                utime $now, $now, "$out/$id.error";
            }
        }
    }
    else {
        my $runtime = $views{ $view }->{runtime};
        my $cmd = qq{docker run -i --rm --user $<}
            . qq{ -v $datadir:/yaml-test-suite-data}
            . qq{ -v $Bin:/matrix/bin}
            . qq{ -v $matrixdir/tmp:/matrix/tmp}
            . qq{ $docker_user/$runtime}
            . qq{ /matrix/bin/run-framework-tests-docker.sh /yaml/bin/$bin true};
#            . qq{ /matrix/bin/run-framework-tests-docker.sh /scripts/$bin true};
        say "Running $cmd";
        system $cmd;
    }
    print "\n";
    $end = time;
    unless ($path) {
        say "Info: $info->{id} $info->{version}";
        if ($verbose) {
            print YAML::XS::Dump $info;
        }
        print "\n";
    }

    my @files = map { "$_" } grep { m{/\w+\.(error|stdout|stderr)$} }
        io->dir("$matrixdir/tmp")->all;
    say "Reading results...";
    for my $file (sort @files) {
        open my $fh, "<", $file or die $!;
        my $got = do { local $/; <$fh> };
        if ($format eq 'event') {
            # HsYAML outputs '=COMMENT'
            $got =~ s/^=COMMENT .*\n//gm;
            if ($view eq 'perl-refparser.event') {
                $got =~ s/<SPC>$/ /gm;
            }
        }
        my $dec = decode_utf8($got);
        my @got = split m/\n/, $dec;

        $file = basename $file;
        my ($id, $suffix) = split m/\./, $file;

        if ($suffix eq 'error') {
            $tests{ $id }->{error} = 1;
            next;
        }
        if (@got > 200) {
            @got = (@got[0 .. 200], "----- 8< -----");
        }
        my $got_data = (join "\n", @got) . "\n";
        if (@got) {
            $tests{ $id }->{ $suffix } = $got_data;
        }
        else {
            $tests{ $id }->{ $suffix } = '';
        }

    }
    print "Done\n";
    rmtree $out;

    mkdir "$matrixdir/data";
    say "Saving tests into $matrixdir/data/$view-out.yaml";
    DumpFile("$matrixdir/data/$view-out.yaml", {
        tests => \%tests,
        date => time,
        time => $end - $start,
        info => $info,
    });

}

sub usage {
    say <<"EOM";

Usage:

Run in docker:
    $0 --view <view>

Specify a script:
    $0 --view <view> --path /path/to/view

Options:
--view, -f      view (see -l)
--list, -l      List supported views
--path          /path/to/view
                If no --path is given, it will run the tests in docker.
--verbose, -v   Increase verbosity
--data-dir      /path/tp/yaml-test-suite/data
--all, -a       Run all views
EOM
    exit 1;
}

sub gather_framework_info {
    my ($view) = @_;
    my $runtime = $views{ $view }->{runtime};
    my $cmd = qq{docker run -i --rm --user $<}
        . qq{ $docker_user/$runtime}
        . q{ cat /yaml/info/views.csv};
    my @lines = qx{$cmd};
    if ($? == 0) {
        chomp @lines;
        my $views = load_csv("view", \@lines);
        return $views;
    }
}

